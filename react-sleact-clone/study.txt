2023-08-16
1. Node.js와 npm
Node.js: Chrome V8 JavaScript 엔진으로 빌드된 JavaScript 런타임(실행 환경)
자바스크립트를 브라우저 말고도 로컬 PC에서도 실행시켜줄 수 있는 실행창(런타임)입니다.

npm(NodeNode Package Manager): Node.js 환경에서 여러 모듈들을 패키지화하여 관리하는 저장소 같은 역할
[1] npm init: Node.js 프로젝트를 시작할때 package.json을 생성해 주는 명령
* node_modules: 설치한 패키지들의 실제 소스 코드가 담겨있는 폴더.

* package.json: 프로젝트의 정보와 특히 프로젝트가 의존하고 있는(설치한) 패키지(모듈)에 대한 정보가 저장되어 있는 파일.
- package.jon 용어
----------------------------------------------------------------
* dependencies: 해당 프로그램이 실행되기 위해 반드시 필요한 모듈 목록
* devDependencies: 해당 프로그램을 개발하는 환경에서 필요한 모듈 목록
* script: npm으로 실행할 수 있는 명령어
----------------------------------------------------------------

* package-lock.json: 사용하고 있는 모든 패키지들의 정확한 버전정보를 추적하여 단 하나의 의존성 트리를 만들 수 있고,
동일한 package.json과 package-lock.json을 이용하는 모든 개발자들이 동일한 버전의 패키지를 기반으로 개발 가능


2. TypeScript
TypeScript: 자바스크립트의 단점을 보완하기 위해 만들어진 정적 타입 언어

TypeScript 필요성
1) 에러의 사전 방지
2) 코드 가이드 및 자동 완성(개발 생산성 향상)

TypeScript -> JavaScript 변환 과정
1) TypeScript가 변환해 주는 것 그대로 사용
2) TypeScript가 변환 후 바벨이 다시 JavaScript로 변환 => 주로 사용!

* babel이 css, html, 이미지 파일을 모두 JavaScript로 변환해 줄 수 있기 때문!


3. Babel과 Webpack
Babel: JavaScript 컴파일러

* 컴파일러 언어: 코드가 실행되기 전 단계인 컴파일 타임에 소스코드 전체를 한번에 머신 코드로 변환한 후 실행한다.
ex) c, c++
* 인터프리터 언어: 코드가 실행되는 단계인 런타임에 문 단위로 한 줄씩 중간 코드인 바이트 코드로 변환한 후 실행한다.
ex) JavaScript

자바스크립트는 인터프리터 언어인데 왜 컴파일러가 필요할까?

정확히는 babel은 javascript로 결과물을 만들어주는 컴파일러입니다. 소스 대 소스 컴파일러 (transpiler)
라고 불립니다.

?? 왜 변환하는 과정이 필요한가 ??
- 모든 브라우저가 최신 문법, 기술(ES6) 을 지원하지 않기 때문에 구 기능(ES5)으로 변환하는 작업이 필요!

Babel 역할
----------------------------------------------------------------
1) Transform syntax (구문 변환): 최신의 자바스크립트 문법을 오래된 브라우저가 이해할 수 있도록 오래된 문법으로 변환해 준다.
2) babel-polyfill을 통해서 폴리필 기능을 지원: 폴리필은 오래된 브라우저에 네이티브로 지원하지 않는 사용자가 사용하는 메서드, 속성, API가 존재하지 않을 때 추가해 준다.
3) JSX 문법을 변환
----------------------------------------------------------------

Webpack: 번들링과 컴파일을 결합하는 정적 모듈 번들러
쉽게 말하면, 필요한 다수의 자바스크립트 파일을 하나의 자바 스크립트 파일로 만들어 주는 것을 Webpack 이라고 한다.

Webpack 필요성
1) SPA 하나의 html 페이지에 여러개의 자바스크립트 파일들이 포함한다. 연관 되어 있는 자바스크립트 종송석 있는 파일들을 하나의 파일로 묶어줘서 관리하기 편하다.
2) 파일을 컴파일 할 때, 여러 모듈들의 파일을 읽어오는데 시간이 오래 걸린다. 그 부분을 해결하기 위해 여러 파일을 하나의 파일로 번들링 해준다.
3) 하나의 자바스크립트 파일로 만들어서 웹페이지 성능 최적화 해준다.

Webpack 구조
----------------------------------------------------------------
* path : 파일의 경로를 다루고 변경하는 유틸리티
* output : build 결과를 저장할 경로
* entry : build의 대상이 될 파일
* Plug-In : build 된 bundle 파일을 동적으로 특정 html 페이지에 추가 할 수 있으며 build 시에 javscript, css, html 등의 파일을 난독화 및 압축을 진행할 수 있다.
----------------------------------------------------------------

2023-08-22
Webpack 설정 후 실행
- webpack은 ts를 인식 못하기 때문에 tsconfig에서 추가 설정 필요
- ts-node 라이브러리를 통해 webpack이 ts실행
 "ts-node": {
    "compilerOptions": {
      "module": "commonjs",
      "moduleResolution": "Node",
      "target": "es5",
      "esModuleInterop": true
    }
  }
- 실행 명령어: npx webpack

4. 핫 리로딩(hot reloading)
- 앱을 처음부터 다시 시작하지 않고 새로운 코드 변경에 따른 코드 변경사항만 표시하며 변경된 코드에만 적용된다. 
- webpack의 핫 모듈을 통해서 핫 리로더 설정을 해서 사용

* webpack-dev-server 사용
- webpack-dev-server는 나중에 proxy서버 역할도 해줘서 CORS에러 해결도 해줌.
npm i webpack-cli
npm i -D @types/webpack-dev-server
npm i @pmmm/react-refresh-webpack-plugin

5. 코드 스플리팅(code splitting)
코드에서 당장 사용하는 부분만을 로딩하고, 현재 필요하지 않은 코드 부분은 따로 분리시켜 나중에 로드함으로써 로딩시간을 개선하는 것

코드 분리 기준
- 페이지 단위
- 서버 사이드 렌더링이 필요하지 않는 것

* loadable__component 사용
npm i @types/loadable__component

* 사용 예시
----------------------------------------------------------------
사용 전: import LogIn from '파일 경로'
사용 후: const LogIn = loadable(()=> import('파일 경로'))
----------------------------------------------------------------

2023-09-04
6. CORS
CORS(Cross Origin Resource Sharing):  웹 어플리케이션에서 다른 도메인의 리소스에 접근할 때 발생하는 보안 이슈를 해결하기 위한 표준 방법

해결 방법
1. 백앤드: 서버에서 Access-Control-Allow-Origin 헤더에 허용할 출처를 기재해서 클라이언트에 응답하면 되는 것
[back/app.js] 
 app.use(
   cors({
     origin: true,
     credentials: true,
     webSocket: true,
   })
 );
2. 프론트: api로 보내는 요청은 주소를 3095인 것처럼 해서 보낸다.
[client/webpack.config] 
 proxy:{
      '/api/':{
        target:'http://localhost:3095',
        changeOrigin:true,
      }
    }
* webpack수정 후에 서버 재시작
참고 자료: (https://inpa.tistory.com/entry/WEB-%F0%9F%93%9A-CORS-%F0%9F%92%AF-%EC%A0%95%EB%A6%AC-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95-%F0%9F%91%8F)

2023-09-06
7. SWR
사용 이유
- 로그인 기능을 구현하기 위해서는 로그인 성공 후, 사용자 정보를 전역에서 사용할 수 있어야 함.
- 기존 프로젝트(hajeong sns)는 리덕스 사용하여 전역으로 관리했지만 비동기 처리를 위해서는 미들웨어를 사용해야한다는 단점!
=> SWR 사용

SWR: 서버에 요청해서 받아온 데이터를 저장함.(통상적으로 get요청)
- 로그인은 post요청인데 어떻게 swr을 쓸지?
- post요청 보내고 난 후 swr로 get요청

사용 방법
- npm i swr
- import useSWR from 'swr';
- const {data, error} = useSWR('/api/user',fetcher,options)

useSWR 인자
1. '/api/user': 요청 보낼 주소
2. fetcher: 앞의 주소를 매개변수로 넘겨 받아 어떻게 처리할 지 정의
const fetcher = (url: string) =>
  axios
    .get(url, {
      withCredentials: true,
    })
    .then((response) => response.data);

- fectcher에서 return한 response.data가 data에 들어감.
- fetcher에서 axios요청 시, 에러날 경우 error로 들어감.

swr 설정
revalidate: revalidate 호출하면 실행하려던 fetcher가 실행됨.
dedopingInteval: dedopingInteval 기간 내에는 캐시에서 불러옴.

swr 활용
1) revalidate: get methode로 서버에 요청하여 사용자 정보 가져옴.
----------------------------------------------------------------
  axios
        .post(
          '/api/users/login',
          { email, password },
          {
            withCredentials: true,
          },
        )
        .then((response) => {
          revalidate();
        })
----------------------------------------------------------------
로그인 시, axios로 post 요청 후 성공하면 swr의 revalidate로 get 요청해 사용자 정보 가져옴.
- 요청을 자주 보낸다는 단점!
- revalidate 대신 mutate 사용

2) mutate: axios로 받아온 데이터(response.data: 사용자 정보)를 data에 mutate를 사용해 넣음.
----------------------------------------------------------------
  axios
        .post(
          '/api/users/login',
          { email, password },
          {
            withCredentials: true,
          },
        )
        .then((response) => {
          mutate(response.data, false);
        })
----------------------------------------------------------------
- mutate 두번째 인자: shouldRevaildate false설정
(mutate는 서버에 요청하지 않고 데이터만 변경하지만 나중에는 서버에 요청을 보내 데이터가 맞는지 확인하는데 이 옵션을 false로 해야 요청이 진짜 가지 않음.)

? 왜 굳이 서버에 요청을 보내 데이터를 확인하는가?
=> Optimistic UI에 유용하게 사용할 수 있음.
* Optimistic UI
특정 요청이 성공 할 것이라 가정을 하고 먼저 그 요청의 결과를 보여주는 방식의 UI(좋은 사용자 경험을 줄 수 있음.)

상황 a) 인스타그램 게시글 하트 눌렀을 경우
원래대로라면, 하트를 누르면 서버에 요청을 보내고 그에 대한 응답으로 하트에 색이 칠해짐.
swr의 mutate로 데이터를 먼저 변경하여 하트에 색을 칠한 후, 서버에 요청을 보냄(Optimistic UI)

3) swr을 비동기 요청에만 사용하는 것은 아님!(전역 데이터 관리)
* localStorage 관리도 가능
const {data} = useSWR('hello',()=>{localStorage.setItem('data',key); return localStorage.getItem('data)})

4) fetcher를 다양하게 만들기
return이 무조건 response.data일 필요는 없고 필요한 데이터에 따라 다르게 return
* fetcher를 다양하게 만들어서 서버에서 오는 데이터를 변형해 data에 저장

- 데이터 필요한 경우
const fetcher = (url: string) =>
  axios
    .get(url, {
      withCredentials: true,
    })
    .then((response) => response.data);

- 데이터의 길이 필요한 경우
const fetcher2 = (url: string) =>
  axios
    .get(url, {
      withCredentials: true,
    })
    .then((response) => response.data.length);

5) 같은 주소에 fetcher 여러개 실행시키고 싶을 때
const { data, error, revalidate, mutate } = useSWR('/api/users', fetcher);
const { data, error, revalidate, mutate } = useSWR('/api/users/?', fetcher2);
const { data, error, revalidate, mutate } = useSWR('/api/users/#123', fetcher2);

* 서버에서는 쿼리스트링, #은 무시, swr에서는 다른 주소로 생각
* 같은 주소로 다른 fetcher를 실행해 다른 data를 저장할 수 있음.


8. 쿠키
쿠키: 서버가 사용자의 웹 브라우저에 전송하는 작은 데이터 조각
- 브라우저는 그 데이터 조각들을 저장해 놓았다가, 동일한 서버에 재 요청 시 저장된 데이터를 함께 전송
- 쿠키는 두 요청이 동일한 브라우저에서 들어왔는지 아닌지를 판단할 때 주로 사용
- 사용자의 로그인 상태를 유지

* 사용 예시: 로그인 요청하면 서버가 쿠키를 만들어서 브라우저에 보내주고, 매번 요청할 때마다 쿠키를 서버에 보내 사용자 확인

- 다른 도메인에 접근 할 때(프론트:localhost:3090, 백:localhost:3095) cors에러와 함께 쿠키 전달이 되지 않음.
- 6-1의 해결 방법(백엔드)에서는 cors에러 해결, 쿠키 전달 문제는 해결되지 않음.(다른 도메인이기 때문에)
* axios요청 시, withCredentials: true를 해주어야 함!
- 6-2의 해결 방법(프론트)에서는 proxy로 도메인을 변경된 것 처럼 해주기 때문에 쿠키 전달 문제 없음.

2023-09-12
9. 중첩 라우터
페이지 구조
Workspace: 모든 페이지 레이아웃 부분
Channel: Workspace내의 그룹
DirectMessage: 채팅 주고 받는 부분

중첩 라우터 적용 전
- App에서 페이지 모두 라우트 지정
- Channel, DirectMessage 페이지에서 공통 레이아웃인 Workspace 지정
- Workspace의 children으로 Channel, DirectMessage가 들어감

* App/index.tsx
<Switch>
    <Route path="/workspace/channel" component={Channel} />
    <Route path="/workspace/dm" component={DirectMessage} />
</Switch>

* Channel/index.tsx
<Workspace>
    <div>Channel</div>
</Workspace>

* Workspace/index.tsx
const Workspace: FC = ({ children }) => {
  return(
    <div>
       {children}
    </div>
  )
}

중첩 라우터 적용 후
- App에서 공통 레이아웃인 Workspace만 지정
- Workspace 라우트 판단

* App/index.tsx
<Switch>
      <Route path="/workspace" component={Workspace} />
</Switch>

* Workspace/index.tsx
const Workspace: FC = () => {
  return(
    <div>
      <Switch>
          <Route path="/workspace/channel" component={Channel} />
          <Route path="/workspace/dm" component={DirectMessage} />
      </Switch>
    </div>
  )
}

* 주의점: 중첩 라우터 할때는 주소의 구조가 같아야함. 위와 같이 workspace로 시작

2023-09-20
10. 이벤트 버블링
버블링(bubbling):한 요소에 이벤트가 발생하면, 이 요소에 할당된 핸들러가 동작하고, 이어서 부모 요소의 핸들러가 동작합니다. 가장 최상단의 조상 요소를 만날 때까지 이 과정이 반복되면서 요소 각각에 할당된 핸들러가 동작합니다.

* 문제 상황
- 모달 영역 외부를 클릭 할 경우 모달이 닫히게 구현
- 이벤트 버블링으로 모달 내부를 클릭해도 닫히는 문제 발생

* 해결
- 모달 내부 부분에서 e.stopPropagation으로 이벤트 버블링 막기

2023-10-23
11. webSocket
webSocket: ws 프로토콜을 기반으로 클라이언트와 서버 사이에 지속적인 완전 양방향 연결 스트림을 만들어 주는 기술
웹소켓(webSocket): 양방향 통신으로 연결이 이루어지면 클라이언트가 요청하지 않아도 데이터가 저절로 서버로부터 올 수 있다. HTTP처럼 별도의 요청을 보내지 않아도 데이터를 수신할 수 있다는 것이다.

* 웹 소켓이 나오기 전, 실시간으로 데이터 받아오게 했던 방법
- Polling: 일정한 주기로 서버에 요청(Request)을 보내는 방법.(setTimeout, setInterval)
- Long Polling: 요청을 보냈을 때, 서버가 응답을 바로 보내지 않고 특정 이벤트나 타임아웃이 발생했을 때 응답을 전달하는 방식.

* 특징
- 한 번 연결되면 양방향 통신이 가능
- 한 번 연결되면 전역적인 특징을 가짐 
  - 웹소켓을 하나의 컴포넌트에 속하게 넣으면 그 컴포넌트가 없어졌을 때 연결이 끊어 질 수 있다.
  - 따라서 공통된 컴포넌트에 넣어줘야함. (화면이 들어가지 않는다면(로직만 있다면) hook로 설정(화면에 들어가도 hook써도됨))

* 라이브러리: socket.id-client
npm i socket.id-client

1) 소켓 연결
const socket = io.connect(`${backUrl}-ws-${workspace}`); 

2) 연결된 소켓 서버로 클라이언트 단의 데이터를 전송
socket.emit('hello', 'world'); // 서버쪽에 hello라는 이름으로 world데이터 전달

3) 연결된 소켓 서버에서 클라이언트로 전송할 데이터가 있을 경우 해당 데이터를 불러오는 메소드
socket.on('message', (data) => {
  console.log(data);
}); // 서버에서 message이름으로 클라이언트로 전송한 데이터 콜백으로 받기
  
4) 소켓 연결 해제
socket.disconnect();

* 주의점
1) io.connect(`${backUrl}`)
서버에 연결된 모든 사람과 통신하게 된다.
ex) workspace의 channel1에 속해있는 사람들이 채팅을 하는데 위와 같이 설정된 경우
workspace의 모든 사람이 channel1의 채팅을 받거나 볼 수 있게 됨.

* 범위를 잘 조정해야함.
io.connect(`${backUrl}-ws-${workspace}`); 

2) workspace가 이동될 경우 소켓 연결을 해제해야함
ex) sleact workspace -> test workspace 이동시, 
소켓 연결을 해제하지 않으면 test workspace에서 sleact workspace의 채팅을 같이 받게 됨.

2023-10-30
12. useSWRInfinite
- 채팅 위로 스크롤 시, 이전 채팅 기록을 불러와야한다.
// DirectMessage
  const {
    data: chatData,
    mutate: mutateChat,
    revalidate,
    setSize,
  } = useSWRInfinite<IDM[]>(
    (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${index + 1}`,
    fetcher,
  );

// ChatList
    // 채팅을 위로 올렸을 때, 이전 채팅 가져오기
  const onScroll = useCallback((values) => {
    if (values.scrollTop === 0 && !isReachingEnd) {
      setSize((prevSize) => prevSize + 1).then(() => {
        //스크롤 위치 유지
      });
    }
  }, []);

- useSWRInfinite는 setSize로 페이지가 변경될 때, 다시 데이터를 불러와준다.

- ref는 chatlist가 아닌 DirectMessage나 channelMessage에 둔다
  * 스크롤이 되어 있는 상태여도 메세지를 보내고 나면 스크롤을 맨 아래로 내려줘야하기 때문이다.

  2023-10-31
  13. Optimistic UI 구현
  - 채팅 post 성공 다음, 스크롤을 아래로 구현할 때, 딜레이 발생
  (서버에 post가 성공하면 스크롤을 아래로 내리기 때문에)
  - Optimistic ui로 구현하면 성공 전에 화면에 딜레이 없이 볼 수 있음.

  [기존]
  const onSubmitForm = useCallback(
    (e) => {
      e.preventDefault();
      if (chat?.trim()) {
        axios
          .post(WWW`/api/workspaces/${workspace}/dms/${id}/chats`, {
            content: chat,
          })
          .then(() => {
            revalidate();
            setChat('');
            scrollbarRef.current?.scrollToBottom();
          })
          .catch(console.error);
      }
    },
    [chat],
  );

  [Optimistic ui 적용]
  const onSubmitForm = useCallback(
    (e) => {
      e.preventDefault();
      if (chat?.trim() && chatData) {
        const savedChat = chat;
        mutateChat((prevChatData) => {
          prevChatData?.[0].unshift({
            id: (chatData[0][0]?.id || 0) + 1,
            content: savedChat,
            SenderId: myData.id,
            Sender: myData,
            ReceiverId: userData.id,
            Receiver: userData,
            createdAt: new Date(),
          });
          return prevChatData;
        }).then(() => {
          setChat('');
          scrollbarRef.current?.scrollToBottom();
        });
        axios
          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {
            content: chat,
          })
          .then(() => {
            revalidate();
          })
          .catch(console.error);
      }
    },
    [chat, chatData, myData, userData, workspace, id],
  );